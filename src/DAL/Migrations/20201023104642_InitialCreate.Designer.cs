// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(ParamilitaryGroupsInsuranceAgencyDbContext))]
    [Migration("20201023104642_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0-rc.2.20475.6");

            modelBuilder.Entity("DAL.Models.Administrator", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Administrators");
                });

            modelBuilder.Entity("DAL.Models.BackgroundInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("BackgroundInfos");
                });

            modelBuilder.Entity("DAL.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("InsuranceAgentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("DAL.Models.ClientConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ObjectId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ObjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ClientConnections");
                });

            modelBuilder.Entity("DAL.Models.ClientInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsuranceOfferId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("InsuranceOfferId");

                    b.ToTable("ClientInsurances");
                });

            modelBuilder.Entity("DAL.Models.Conflict", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Beginning")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DirectorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.ToTable("Conflicts");
                });

            modelBuilder.Entity("DAL.Models.ConflictInvolvement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ConflictId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ConflictId");

                    b.ToTable("ConflictInvolvements");
                });

            modelBuilder.Entity("DAL.Models.ConflictRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BalanceChange")
                        .HasColumnType("int");

                    b.Property<int>("ConflictInvolvementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ConflictInvolvementId");

                    b.ToTable("ConflictRecords");
                });

            modelBuilder.Entity("DAL.Models.Director", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("DAL.Models.Gear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("Condition")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Gears");
                });

            modelBuilder.Entity("DAL.Models.InsuranceAgent", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("DirectorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.ToTable("InsuranceAgents");
                });

            modelBuilder.Entity("DAL.Models.InsuranceOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DirectorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.ToTable("InsuranceOffers");
                });

            modelBuilder.Entity("DAL.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Birth")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DAL.Models.Administrator", b =>
                {
                    b.HasOne("DAL.Models.User", "User")
                        .WithOne("Administrator")
                        .HasForeignKey("DAL.Models.Administrator", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.BackgroundInfo", b =>
                {
                    b.HasOne("DAL.Models.Client", "Client")
                        .WithMany("BackgroundInfos")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DAL.Models.Client", b =>
                {
                    b.HasOne("DAL.Models.InsuranceAgent", "InsuranceAgent")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.User", "User")
                        .WithOne("Client")
                        .HasForeignKey("DAL.Models.Client", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("InsuranceAgent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.ClientConnection", b =>
                {
                    b.HasOne("DAL.Models.Client", "Object")
                        .WithMany("ObjectConnections")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Client", "Subject")
                        .WithMany("SubjectConnections")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Object");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("DAL.Models.ClientInsurance", b =>
                {
                    b.HasOne("DAL.Models.Client", "Client")
                        .WithMany("ClientInsurances")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Models.InsuranceOffer", "InsuranceOffer")
                        .WithMany("ClientInsurances")
                        .HasForeignKey("InsuranceOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("InsuranceOffer");
                });

            modelBuilder.Entity("DAL.Models.Conflict", b =>
                {
                    b.HasOne("DAL.Models.Director", "Director")
                        .WithMany("Conflicts")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");
                });

            modelBuilder.Entity("DAL.Models.ConflictInvolvement", b =>
                {
                    b.HasOne("DAL.Models.Client", "Client")
                        .WithMany("ConflictInvolvements")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Models.Conflict", "Conflict")
                        .WithMany("ConflictInvolvements")
                        .HasForeignKey("ConflictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Conflict");
                });

            modelBuilder.Entity("DAL.Models.ConflictRecord", b =>
                {
                    b.HasOne("DAL.Models.ConflictInvolvement", "ConflictInvolvement")
                        .WithMany("ConflictRecords")
                        .HasForeignKey("ConflictInvolvementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConflictInvolvement");
                });

            modelBuilder.Entity("DAL.Models.Director", b =>
                {
                    b.HasOne("DAL.Models.User", "User")
                        .WithOne("Director")
                        .HasForeignKey("DAL.Models.Director", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.Gear", b =>
                {
                    b.HasOne("DAL.Models.Client", "Client")
                        .WithMany("Gears")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DAL.Models.InsuranceAgent", b =>
                {
                    b.HasOne("DAL.Models.Director", "Director")
                        .WithMany("InsuranceAgents")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.User", "User")
                        .WithOne("InsuranceAgent")
                        .HasForeignKey("DAL.Models.InsuranceAgent", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Director");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.InsuranceOffer", b =>
                {
                    b.HasOne("DAL.Models.Director", "Director")
                        .WithMany("InsuranceOffers")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");
                });

            modelBuilder.Entity("DAL.Models.Client", b =>
                {
                    b.Navigation("BackgroundInfos");

                    b.Navigation("ClientInsurances");

                    b.Navigation("ConflictInvolvements");

                    b.Navigation("Gears");

                    b.Navigation("ObjectConnections");

                    b.Navigation("SubjectConnections");
                });

            modelBuilder.Entity("DAL.Models.Conflict", b =>
                {
                    b.Navigation("ConflictInvolvements");
                });

            modelBuilder.Entity("DAL.Models.ConflictInvolvement", b =>
                {
                    b.Navigation("ConflictRecords");
                });

            modelBuilder.Entity("DAL.Models.Director", b =>
                {
                    b.Navigation("Conflicts");

                    b.Navigation("InsuranceAgents");

                    b.Navigation("InsuranceOffers");
                });

            modelBuilder.Entity("DAL.Models.InsuranceOffer", b =>
                {
                    b.Navigation("ClientInsurances");
                });

            modelBuilder.Entity("DAL.Models.User", b =>
                {
                    b.Navigation("Administrator");

                    b.Navigation("Client");

                    b.Navigation("Director");

                    b.Navigation("InsuranceAgent");
                });
#pragma warning restore 612, 618
        }
    }
}
