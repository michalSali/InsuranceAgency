// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(ParamilitaryGroupsInsuranceAgencyDbContext))]
    [Migration("20210213133552_CompleteData")]
    partial class CompleteData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("DAL.Models.Administrator", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Administrators");

                    b.HasData(
                        new
                        {
                            Id = 999
                        });
                });

            modelBuilder.Entity("DAL.Models.BackgroundInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("BackgroundInfos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            Date = new DateTime(2020, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "Nationality: American"
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 1,
                            Date = new DateTime(2020, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "Family Status: Married"
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 4,
                            Date = new DateTime(2019, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "Nationality: Russian"
                        });
                });

            modelBuilder.Entity("DAL.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("InsuranceAgentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceAgentId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 999,
                            InsuranceAgentId = 6
                        },
                        new
                        {
                            Id = 1,
                            InsuranceAgentId = 6
                        },
                        new
                        {
                            Id = 2,
                            InsuranceAgentId = 6
                        },
                        new
                        {
                            Id = 3,
                            InsuranceAgentId = 6
                        },
                        new
                        {
                            Id = 4,
                            InsuranceAgentId = 6
                        },
                        new
                        {
                            Id = 5,
                            InsuranceAgentId = 6
                        });
                });

            modelBuilder.Entity("DAL.Models.ClientConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ObjectId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ObjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ClientConnections");
                });

            modelBuilder.Entity("DAL.Models.ClientInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Declined")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsuranceOfferId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("InsuranceOfferId");

                    b.ToTable("ClientInsurances");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Approved = true,
                            ClientId = 1,
                            CreationDate = new DateTime(2020, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Declined = false,
                            ExpirationDate = new DateTime(2022, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsuranceOfferId = 1
                        },
                        new
                        {
                            Id = 2,
                            Approved = false,
                            ClientId = 1,
                            CreationDate = new DateTime(2017, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Declined = true,
                            ExpirationDate = new DateTime(2019, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsuranceOfferId = 2
                        },
                        new
                        {
                            Id = 3,
                            Approved = false,
                            ClientId = 1,
                            CreationDate = new DateTime(2021, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Declined = false,
                            ExpirationDate = new DateTime(2022, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsuranceOfferId = 3
                        },
                        new
                        {
                            Id = 4,
                            Approved = false,
                            ClientId = 1,
                            CreationDate = new DateTime(2015, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Declined = false,
                            ExpirationDate = new DateTime(2018, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsuranceOfferId = 4
                        },
                        new
                        {
                            Id = 5,
                            Approved = true,
                            ClientId = 2,
                            CreationDate = new DateTime(2020, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Declined = false,
                            ExpirationDate = new DateTime(2021, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsuranceOfferId = 1
                        },
                        new
                        {
                            Id = 6,
                            Approved = true,
                            ClientId = 2,
                            CreationDate = new DateTime(2017, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Declined = false,
                            ExpirationDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsuranceOfferId = 2
                        });
                });

            modelBuilder.Entity("DAL.Models.Conflict", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Beginning")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DirectorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.ToTable("Conflicts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Beginning = new DateTime(2016, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DirectorId = 7,
                            Location = "Location_1",
                            Name = "conflict_1"
                        },
                        new
                        {
                            Id = 2,
                            Beginning = new DateTime(2018, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DirectorId = 7,
                            Location = "Location_2",
                            Name = "conflict_2"
                        },
                        new
                        {
                            Id = 3,
                            Beginning = new DateTime(1999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DirectorId = 7,
                            Location = "Location_3",
                            Name = "conflict_3"
                        });
                });

            modelBuilder.Entity("DAL.Models.ConflictInvolvement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ConflictId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ConflictId");

                    b.ToTable("ConflictInvolvements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            ConflictId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 1,
                            ConflictId = 2
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 2,
                            ConflictId = 3
                        });
                });

            modelBuilder.Entity("DAL.Models.ConflictRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BalanceChange")
                        .HasColumnType("int");

                    b.Property<int>("ConflictInvolvementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConflictInvolvementId");

                    b.ToTable("ConflictRecords");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BalanceChange = 250,
                            ConflictInvolvementId = 1,
                            Date = new DateTime(1999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "record_1"
                        },
                        new
                        {
                            Id = 2,
                            BalanceChange = -69,
                            ConflictInvolvementId = 1,
                            Date = new DateTime(2020, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "record_2"
                        },
                        new
                        {
                            Id = 3,
                            BalanceChange = 420,
                            ConflictInvolvementId = 2,
                            Date = new DateTime(2018, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "record_3"
                        },
                        new
                        {
                            Id = 4,
                            BalanceChange = -1337,
                            ConflictInvolvementId = 3,
                            Date = new DateTime(1986, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "record_4"
                        });
                });

            modelBuilder.Entity("DAL.Models.Director", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Section")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Directors");

                    b.HasData(
                        new
                        {
                            Id = 999,
                            Section = "AdminSection"
                        },
                        new
                        {
                            Id = 7,
                            Section = "section_1"
                        });
                });

            modelBuilder.Entity("DAL.Models.Gear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Gears");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            Type = 1,
                            Value = 0
                        },
                        new
                        {
                            Id = 6,
                            ClientId = 1,
                            Type = 0,
                            Value = 0
                        },
                        new
                        {
                            Id = 9,
                            ClientId = 1,
                            Type = 2,
                            Value = 0
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 2,
                            Type = 1,
                            Value = 0
                        },
                        new
                        {
                            Id = 7,
                            ClientId = 2,
                            Type = 0,
                            Value = 0
                        },
                        new
                        {
                            Id = 10,
                            ClientId = 2,
                            Type = 2,
                            Value = 0
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 3,
                            Type = 1,
                            Value = 0
                        },
                        new
                        {
                            Id = 8,
                            ClientId = 3,
                            Type = 0,
                            Value = 0
                        },
                        new
                        {
                            Id = 11,
                            ClientId = 3,
                            Type = 2,
                            Value = 0
                        },
                        new
                        {
                            Id = 4,
                            ClientId = 4,
                            Type = 1,
                            Value = 0
                        },
                        new
                        {
                            Id = 12,
                            ClientId = 4,
                            Type = 3,
                            Value = 0
                        },
                        new
                        {
                            Id = 5,
                            ClientId = 5,
                            Type = 1,
                            Value = 0
                        },
                        new
                        {
                            Id = 13,
                            ClientId = 5,
                            Type = 3,
                            Value = 0
                        },
                        new
                        {
                            Id = 14,
                            ClientId = 5,
                            Type = 4,
                            Value = 0
                        });
                });

            modelBuilder.Entity("DAL.Models.InsuranceAgent", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("DirectorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.ToTable("InsuranceAgents");

                    b.HasData(
                        new
                        {
                            Id = 999,
                            DirectorId = 7
                        },
                        new
                        {
                            Id = 6,
                            DirectorId = 7
                        });
                });

            modelBuilder.Entity("DAL.Models.InsuranceOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DirectorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.ToTable("InsuranceOffers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2020, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "The best insurance",
                            DirectorId = 7,
                            ExpirationDate = new DateTime(2022, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2016, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "2 year-insurance",
                            DirectorId = 7,
                            ExpirationDate = new DateTime(2020, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2019, 11, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "all-inclusive insurance",
                            DirectorId = 7,
                            ExpirationDate = new DateTime(2022, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2015, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "long-term insurance",
                            DirectorId = 7,
                            ExpirationDate = new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DAL.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Birth")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Password");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 999,
                            Birth = new DateTime(1987, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            Name = "pmagent",
                            PasswordHash = "IsnoVnideq7x5rpkMk6bJ5PK52k=,Va3S+BEf6CqpTAYoSegPNw=="
                        },
                        new
                        {
                            Id = 1,
                            Birth = new DateTime(1987, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            Name = "Terry Fisher",
                            PasswordHash = "CsvwiffhUv+9L/6deMUyfDlqjl8=,5nmFB+tEqLJ90pS//st7qw=="
                        },
                        new
                        {
                            Id = 2,
                            Birth = new DateTime(1986, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            Name = "Richard Clarkson",
                            PasswordHash = "9ss+7ZAw1oFMochc8UZDQfuOwPE=,abvbKNuT94wS5CUQhY8R+A=="
                        },
                        new
                        {
                            Id = 3,
                            Birth = new DateTime(1984, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            Name = "George Hammond",
                            PasswordHash = "5Eu/AKUecrleXqs3ccxfypJ7isk=,Nt1mgP1g740BbEBGZT0yrg=="
                        },
                        new
                        {
                            Id = 4,
                            Birth = new DateTime(1992, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            Name = "Grigoriy Korolev",
                            PasswordHash = "Et5xs4f7yoijB3HSzIC6+eGDjjM=,K1vgCbbzgM/YQK/nL61JHg=="
                        },
                        new
                        {
                            Id = 5,
                            Birth = new DateTime(1994, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            Name = "Vladimir Korolev",
                            PasswordHash = "eFEFCGvj1pK3NrmhXgTS+cwe0E0=,aH+JjgSbpfplfJTIoVG7Mw=="
                        },
                        new
                        {
                            Id = 6,
                            Birth = new DateTime(1987, 8, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            Name = "Christopher Judge",
                            PasswordHash = "morOz8mToJI6j+7M/W/MIK/Hecs=,2UoL6f9n6OGDBPJTchgflw=="
                        },
                        new
                        {
                            Id = 7,
                            Birth = new DateTime(1983, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            Name = "Cliff Simon",
                            PasswordHash = "uRlQTWWdRfhvahmpoWygF5EXn9k=,I5b1MsAguBbVw+vmytzDbw=="
                        },
                        new
                        {
                            Id = 8,
                            Birth = new DateTime(1988, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            Name = "Charles Shaw",
                            PasswordHash = "DkmS6xF5bnV7nIcMUp5B3iNx1aQ=,gazCr7O/8iTD/LzAmnrLsA=="
                        },
                        new
                        {
                            Id = 9,
                            Birth = new DateTime(1989, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 1,
                            Name = "Rebecca Pearson",
                            PasswordHash = "FoEHaRKnnDtPmApsT2p7ZuQ+Q1Y=,PBik5QZm2mkmGm1B99OZ3g=="
                        },
                        new
                        {
                            Id = 10,
                            Birth = new DateTime(1991, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 1,
                            Name = "Maria Mitchell",
                            PasswordHash = "aseNUi/rtnkvUW/tuoUCCDJ+5OM=,iCH59QapF4HhPG5kqpJwOA=="
                        });
                });

            modelBuilder.Entity("DAL.Models.Administrator", b =>
                {
                    b.HasOne("DAL.Models.User", "User")
                        .WithOne("Administrator")
                        .HasForeignKey("DAL.Models.Administrator", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.BackgroundInfo", b =>
                {
                    b.HasOne("DAL.Models.Client", "Client")
                        .WithMany("BackgroundInfos")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DAL.Models.Client", b =>
                {
                    b.HasOne("DAL.Models.User", "User")
                        .WithOne("Client")
                        .HasForeignKey("DAL.Models.Client", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.InsuranceAgent", "InsuranceAgent")
                        .WithMany("Clients")
                        .HasForeignKey("InsuranceAgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InsuranceAgent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.ClientConnection", b =>
                {
                    b.HasOne("DAL.Models.Client", "Object")
                        .WithMany("ObjectConnections")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Client", "Subject")
                        .WithMany("SubjectConnections")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Object");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("DAL.Models.ClientInsurance", b =>
                {
                    b.HasOne("DAL.Models.Client", "Client")
                        .WithMany("ClientInsurances")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Models.InsuranceOffer", "InsuranceOffer")
                        .WithMany("ClientInsurances")
                        .HasForeignKey("InsuranceOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("InsuranceOffer");
                });

            modelBuilder.Entity("DAL.Models.Conflict", b =>
                {
                    b.HasOne("DAL.Models.Director", "Director")
                        .WithMany("Conflicts")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");
                });

            modelBuilder.Entity("DAL.Models.ConflictInvolvement", b =>
                {
                    b.HasOne("DAL.Models.Client", "Client")
                        .WithMany("ConflictInvolvements")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Models.Conflict", "Conflict")
                        .WithMany("ConflictInvolvements")
                        .HasForeignKey("ConflictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Conflict");
                });

            modelBuilder.Entity("DAL.Models.ConflictRecord", b =>
                {
                    b.HasOne("DAL.Models.ConflictInvolvement", "ConflictInvolvement")
                        .WithMany("ConflictRecords")
                        .HasForeignKey("ConflictInvolvementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConflictInvolvement");
                });

            modelBuilder.Entity("DAL.Models.Director", b =>
                {
                    b.HasOne("DAL.Models.User", "User")
                        .WithOne("Director")
                        .HasForeignKey("DAL.Models.Director", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.Gear", b =>
                {
                    b.HasOne("DAL.Models.Client", "Client")
                        .WithMany("Gears")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DAL.Models.InsuranceAgent", b =>
                {
                    b.HasOne("DAL.Models.Director", "Director")
                        .WithMany("InsuranceAgents")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.User", "User")
                        .WithOne("InsuranceAgent")
                        .HasForeignKey("DAL.Models.InsuranceAgent", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Director");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.InsuranceOffer", b =>
                {
                    b.HasOne("DAL.Models.Director", "Director")
                        .WithMany("InsuranceOffers")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");
                });

            modelBuilder.Entity("DAL.Models.Client", b =>
                {
                    b.Navigation("BackgroundInfos");

                    b.Navigation("ClientInsurances");

                    b.Navigation("ConflictInvolvements");

                    b.Navigation("Gears");

                    b.Navigation("ObjectConnections");

                    b.Navigation("SubjectConnections");
                });

            modelBuilder.Entity("DAL.Models.Conflict", b =>
                {
                    b.Navigation("ConflictInvolvements");
                });

            modelBuilder.Entity("DAL.Models.ConflictInvolvement", b =>
                {
                    b.Navigation("ConflictRecords");
                });

            modelBuilder.Entity("DAL.Models.Director", b =>
                {
                    b.Navigation("Conflicts");

                    b.Navigation("InsuranceAgents");

                    b.Navigation("InsuranceOffers");
                });

            modelBuilder.Entity("DAL.Models.InsuranceAgent", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("DAL.Models.InsuranceOffer", b =>
                {
                    b.Navigation("ClientInsurances");
                });

            modelBuilder.Entity("DAL.Models.User", b =>
                {
                    b.Navigation("Administrator");

                    b.Navigation("Client");

                    b.Navigation("Director");

                    b.Navigation("InsuranceAgent");
                });
#pragma warning restore 612, 618
        }
    }
}
