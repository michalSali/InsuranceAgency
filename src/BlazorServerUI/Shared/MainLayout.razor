@using BlazorServerUI.Authentication
@inherits LayoutComponentBase

<div class="main">
    <MudThemeProvider />
    <MudLayout>
        <MudAppBar Elevation="1">
            <MudIconButton Icon="@Icons.Material.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            <MudText Typo="Typo.h5" Class="ml-3">Paramilitary Group Insurance Agency inc.</MudText>
            <MudAppBarSpacer />
            <AuthorizeView>
                <Authorized>
                    <MudIconButton Icon="@Icons.Material.ExitToApp" OnClick="Logout" Color="Color.Inherit">Logout</MudIconButton>
                </Authorized>
                <NotAuthorized>
                    <MudIconButton Icon="@Icons.Material.Login" OnClick="Login" Color="Color.Inherit">Login</MudIconButton>
                </NotAuthorized>
            </AuthorizeView>
            @*<MudIconButton Icon="@Icons.Material.MoreVert" Color="Color.Inherit" Edge="Edge.End" />*@
        </MudAppBar>
        <MudDrawer @bind-Open="_drawerOpen" Clipped="true" Elevation="2">
            <NavMenu />
        </MudDrawer>
        <MudMainContent>
            @Body
        </MudMainContent>
    </MudLayout>
    
</div>

@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager
@code {
    
    bool _drawerOpen = true;
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void Login(MouseEventArgs _)
    {
        navigationManager.NavigateTo("/login");
    }

    private Task Logout(MouseEventArgs _)
    {
        return ((CustomAuthenticationStateProvider) authenticationStateProvider).MarkUserAsLoggedOut();
    }
}
