@page "/showClientConflicts"
@attribute [Authorize(Roles="InsuranceAgent")]
@using BLL.DTOs.People.InsuranceAgent
@using BLL.DTOs.People.User
@using BLL.Facades.Client
@using BLL.Facades.Conflict
@using BLL.DTOs.People.Client
@using BLL.DTOs.Objects.ConflictInvolvement
@using BLL.DTOs.Objects.ConflictRecord
@using BLL.DTOs.Objects.Conflict
@using Microsoft.AspNetCore.Http.Extensions
@using BlazorServerUI.Authentication.Utility

<MudItem xs="12" sm="6" md="4">
    <MudSelect T="ClientGetDTO" Label="Client" @bind-Value="selectedClient" ToStringFunc="new Func<ClientGetDTO, string>(x => x?.UserInfo?.Name)" SelectedValuesChanged="refreshData">
        @foreach (var client in Clients)
        {
            <MudSelectItem Value="@(client)" />
        }
    </MudSelect>
</MudItem>

@if (selectedClient != null)
{
    <MudTable ServerData="@(new Func<TableState, Task<TableData<ConflictRecordGetDTO>>>(ServerReload))" Hover="true" SortLabel="Sort By" @ref="table">    
        <ToolBarContent>
            <MudText Typo="Typo.h6">Client's Conflicts</MudText>
            <MudToolBarSpacer />
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" 
                            AdornmentIcon="@Icons.Material.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        
        <HeaderContent>            
            <MudTh><MudTableSortLabel SortLabel="conflict_name" T="ConflictRecordGetDTO">Conflict Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="description" T="ConflictRecordGetDTO">Description</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortLabel="date" T="ConflictRecordGetDTO">Date</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="balance_change" T="ConflictRecordGetDTO">Balance Change</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Conflict Name">@context.Conflict.Name</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Date">@context.Date</MudTd>
            <MudTd DataLabel="Balance Change">@context.BalanceChange</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
        </PagerContent>
    </MudTable>
}



@inject IClientFacade _clientFacade
@inject IConflictFacade  _conflictFacade
@inject NavigationManager NavManager

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private int id;

    public ClientGetDTO selectedClient { get; set; }

    public IEnumerable<ClientGetDTO> Clients { get; set; }

    private IEnumerable<ConflictRecordGetDTO> pagedData;
    private MudTable<ConflictRecordGetDTO> table;

    private int totalItems;
    private string searchString = null;

    protected override async Task OnInitializedAsync()
    {
        id = CustomClaimsUtility.ExtractClaimsId((await authenticationStateTask).User);
        Clients = await _clientFacade.GetAllClientsAsync(true, id);
    }

    private void refreshData()
    {
        if (table != null)
        {
            table.ReloadServerData();
        }
    }

    private async Task<TableData<ConflictRecordGetDTO>> ServerReload(TableState state)
    {
        IEnumerable<ConflictRecordGetDTO> data = await _conflictFacade.GetAllRecordsWithParticipantIdSorted(selectedClient.Id);

        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Conflict.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{element.Date} {element.BalanceChange}".Contains(searchString))
                return true;
            return false;
        }).ToList();
        totalItems = data.Count();

        if (state.SortDirection == SortDirection.Ascending)
        {
            switch (state.SortLabel)
            {
                case "conflict_name":
                    data = data.OrderBy(o => o.Conflict.Name);
                    break;
                case "description":
                    data = data.OrderBy(o => o.Description);
                    break;
                case "date":
                    data = data.OrderBy(o => o.Date);
                    break;
                case "balance_change":
                    data = data.OrderBy(o => o.BalanceChange);
                    break;
            }
        } 
        else
        {
            switch (state.SortLabel)
            {
                case "conflict_name":
                    data = data.OrderByDescending(o => o.Conflict.Name);
                    break;
                case "description":
                    data = data.OrderByDescending(o => o.Description);
                    break;
                case "date":
                    data = data.OrderByDescending(o => o.Date);
                    break;
                case "balance_change":
                    data = data.OrderByDescending(o => o.BalanceChange);
                    break;
            }
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<ConflictRecordGetDTO>() {TotalItems = totalItems, Items = pagedData};
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }
}
